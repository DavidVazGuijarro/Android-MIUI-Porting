#!/bin/bash

#cleanup
clear;

echo "***************************************";
echo "datagutt .:. Auto Porting .:. ";
echo "Based on script by iBotPeaches";
echo "***************************************";

#setup vars
dir=$PWD;
phone="i9300";
version="3.8.29";

#helper vars
miui_path="$dir/raw_miui";
cm_path="$dir/raw_cm";
port_path="$dir/port";
diffmerge="/Applications/DiffMerge.app/Contents/MacOS/DiffMerge";
SIGN_TARGET_FILES_APKS="$dir/../tools/releasetools/sign_target_files_apks";
APKCERTS="$dir/../tools/apkcerts.txt";

#cleanup
if [ -d $dir/wip ]; then
    cd $dir/wip;
    rm -rf *;
else
   mkdir -p $dir/wip;
fi

#cleanup
if [ -d $dir/COMPLETED_ZIPS ]; then
    cd $dir/COMPLETED_ZIPS;
    rm -rf *;
else
   mkdir -p $dir/COMPLETED_ZIPS;
fi

#Check for MIUI & CM
if [ ! -f $dir/raw_cm/boot.img ]; then
   echo "Missing CM Rom. Please drop CM rom (unzipped) into raw_cm";
   exit;
fi

if [ ! -d $dir/raw_miui/system ]; then
   echo "Missing MIUI Rom. Please drop MIUI rom (unzipped) into raw_miui";
   exit;
fi

#move CM base to port folder
if [ -d $dir/port ]; then
    rm -rf $dir/port;
fi

mkdir -p $dir/port

#begin copy
cd $dir/raw_cm;
cp -aRf * ../port;

#delete CM specific stuff
rm -rf $dir/port/system/framework/*;
rm -rf $dir/port/system/app/*;
rm -rf $dir/port/system/font/*;
rm -rf $dir/port/system/media/*;
rm -rf $dir/port/system/xbin/su;

## BEGIN COPY OF MIUI FILES

#libs
cp -aRf $miui_path/system/lib/content-types.properties $port_path/system/lib/content-types.properties;
cp -aRf $miui_path/system/lib/libFreqFilter.so $port_path/system/lib/libFreqFilter.so;
cp -aRf $miui_path/system/lib/libaudiofp.so $port_path/system/lib/libaudiofp.so;
cp -aRf $miui_path/system/lib/libffmpeg_xm.so $port_path/system/lib/libffmpeg_xm.so;
cp -aRf $miui_path/system/lib/libffplayer_jni.so $port_path/system/lib/libffplayer_jni.so;
cp -aRf $miui_path/system/lib/libimageprocessor_jni.so $port_path/system/lib/libimageprocessor_jni.so;
cp -aRf $miui_path/system/lib/libimageutilities_jni.so $port_path/system/lib/libimageutilities_jni.so;
cp -aRf $miui_path/system/lib/liblbesec.so $port_path/system/lib/liblbesec.so;
cp -aRf $miui_path/system/lib/liblocSDK_2_5OEM.so $port_path/system/lib/liblocSDK_2_5OEM.so;
cp -aRf $miui_path/system/lib/libjni_resource_drm.so $port_path/system/lib/libjni_resource_drm.so;
cp -aRf $miui_path/system/lib/libmp3lame.so $port_path/system/lib/libmp3lame.so;
cp -aRf $miui_path/system/lib/libjni_resource_patcher.so $port_path/system/lib/libjni_resource_patcher.so;
cp -aRf $miui_path/system/lib/libpatcher_jni.so $port_path/system/lib/libpatcher_jni.so;
cp -aRf $miui_path/system/lib/libphotocli.so $port_path/system/lib/libphotocli.so;
cp -aRf $miui_path/system/lib/libshell* $port_path/system/lib/;
cp -aRf $miui_path/system/lib/libMiuiGalleryJNI.so $port_path/system/lib/;
# Grab MIUI NFC stuff
cp -aRf $miui_path/system/lib/libnfc.so $port_path/system/lib/;
cp -aRf $miui_path/system/lib/libnfc_jni.so $port_path/system/lib/;
cp -aRf $miui_path/system/lib/libnfc_ndef.so $port_path/system/lib/;
# Fix external sdcard support
cp -aRf $miui_path/system/lib/libdrmframework_jni.so $port_path/system/lib/libdrmframework_jni.so;
cp -aRf $miui_path/system/lib/libmedia_jni.so $port_path/system/lib/libmedia_jni.so;
cp -aRf $miui_path/system/lib/libmtp.so $port_path/system/lib/libmtp.so;

#etc
cp -aRf $miui_path/system/etc/yellowpage.db $port_path/system/etc/yellowpage.db;
cp -aRf $miui_path/system/etc/telocation.idf $port_path/system/etc/telocation.idf;
cp -aRf $miui_path/system/etc/pinyinindex.idf $port_path/system/etc/pinyinindex.idf;
cp -aRf $miui_path/system/etc/permission_config.json $port_path/system/etc/permission_config.json;
cp -aRf $miui_path/system/etc/spn-conf.xml $port_path/system/etc/spn-conf.xml;

#etc - permissions
cp -aRf $miui_path/system/etc/permissions/com.nxp.mifare.xml $port_path/system/etc/permissions/com.nxp.mifare.xml;
cp -aRf $miui_path/system/etc/permissions/com.google.android.maps.xml $port_path/system/etc/permissions/com.google.android.maps.xml;

#bin
cp -aRf $miui_path/system/bin/iptables $port_path/system/bin/iptables;
#xbin
cp -aRf $miui_path/system/xbin/su $port_path/system/xbin/su;
cp -aRf $miui_path/system/xbin/shelld $port_path/system/xbin/shelld;
# the rest of MIUI
cp -aRf $miui_path/system/app/* $port_path/system/app/;
cp -aRf $miui_path/system/framework/* $port_path/system/framework/;
cp -aRf $miui_path/system/fonts/* $port_path/system/fonts/;
cp -aRf $miui_path/system/media/* $port_path/system/media/;
# Replace LatinIME, because it will fc with the MIUI one
rm $port_path/system/app/LatinIme*.apk;
cp $cm_path/system/app/LatinIME.apk $port_path/system/app/;

## Use prebuilt updater.script & build.prop
## Saves about 200 lines of bash. (Those reserved for MIUI Build Scripts)
## Copy everything that is pre-made
cp -aRf $dir/move_over/* $port_path/;

## BEGIN DECOMPILE
mkdir -p $dir/wip/jars/miui;
mkdir -p $dir/wip/jars/cm;
mkdir -p $dir/wip/apks;

# IF the frameworks
for file in $port_path/system/framework/*.apk; do
  $dir/../tools/apktool if $file;
done

# decompile jars that need smali editing
$dir/../tools/apktool d --no-debug-info $port_path/system/framework/services.jar -o $dir/wip/jars/miui/services.jar.out
$dir/../tools/apktool d --no-debug-info $port_path/system/framework/framework.jar -o $dir/wip/jars/miui/framework.jar.out
$dir/../tools/apktool d --no-debug-info $port_path/system/framework/android.policy.jar  -o $dir/wip/jars/miui/android.policy.jar.out
$dir/../tools/apktool d --no-debug-info $port_path/system/framework/telephony-common.jar -o $dir/wip/jars/miui/telephony-common.jar.out
$dir/../tools/apktool d --no-debug-info $cm_path/system/framework/services.jar -o $dir/wip/jars/cm/services.jar.out
$dir/../tools/apktool d --no-debug-info $cm_path/system/framework/framework.jar -o $dir/wip/jars/cm/framework.jar.out
$dir/../tools/apktool d --no-debug-info $cm_path/system/framework/android.policy.jar -o  $dir/wip/jars/cm/android.policy.jar.out
$dir/../tools/apktool d --no-debug-info $cm_path/system/framework/telephony-common.jar   -o $dir/wip/jars/cm/telephony-common.jar.out

#decompile APKs that need editing.
$dir/../tools/apktool d --no-src $port_path/system/framework/framework-res.apk -o $dir/wip/apks/framework-res.apk
$dir/../tools/apktool d --no-src $port_path/system/app/LBESEC_MIUI.apk -o $dir/wip/apks/LBESEC_MIUI.apk
$dir/../tools/apktool d $port_path/system/app/Settings.apk -o $dir/wip/apks/Settings.apk

#lets merge smali that is just direct merge
# USING MIUI FOLDER AS LIVE

#kudos to Tejh for doing the long hours part
wip_cm=$dir/wip/jars/cm;
wip_miui=$dir/wip/jars/miui;

#auto merge framework
cp -aRf $wip_cm/framework.jar.out/smali/android/os/PowerManager*.smali $wip_miui/framework.jar.out/smali/android/os/;
cp -aRf $wip_cm/framework.jar.out/smali/android/hardware/Camera*.smali $wip_miui/framework.jar.out/smali/android/hardware/;

echo "Manually fixing webkit";
cp -aRf $wip_cm/framework.jar.out/smali/android/webkit/WebViewCore*.smali $wip_miui/framework.jar.out/smali/android/webkit/;
cp -aRf $wip_cm/framework.jar.out/smali/android/webkit/WebSettingsClassic\$*.smali $wip_miui/framework.jar.out/smali/android/webkit/;
cp -aRf $wip_cm/framework.jar.out/smali/android/webkit/HTML5*.smali $wip_miui/framework.jar.out/smali/android/webkit/;
cp -aRf $wip_cm/framework.jar.out/smali/android/webkit/SelectActionModeCallback*.smali $wip_miui/framework.jar.out/smali/android/webkit/;

cp -aRf $wip_cm/framework.jar.out/smali/android/content/res/PackageRedirectionMap*.smali $wip_miui/framework.jar.out/smali/android/content/res/

cp -aRf $wip_cm/telephony-common.jar.out/smali/com/android/internal/telephony/BaseCommands.smali $wip_miui/telephony-common.jar.out/smali/com/android/internal/telephony/BaseCommands.smali
cp -aRf $wip_cm/telephony-common.jar.out/smali/com/android/internal/telephony/PhoneFactory.smali $wip_miui/telephony-common.jar.out/smali/com/android/internal/telephony/PhoneFactory.smali
cp -aRf $wip_cm/telephony-common.jar.out/smali/com/android/internal/telephony/RIL*.smali $wip_miui/telephony-common.jar.out/smali/com/android/internal/telephony/;
cp -aRf $wip_cm/telephony-common.jar.out/smali/com/android/internal/telephony/Samsung*.smali $wip_miui/telephony-common.jar.out/smali/com/android/internal/telephony/;

cp -aRf $wip_cm/framework.jar.out/smali/com/android/internal/telephony/RIL*.smali $wip_miui/framework.jar.out/smali/com/android/internal/telephony/;

cp -aRf $wip_cm/framework.jar.out/smali/android/telephony/CellSignalStrength*.smali $wip_miui/framework.jar.out/smali/android/telephony/;
cp -aRf $wip_cm/framework.jar.out/smali/android/telephony/SignalStrength*.smali $wip_miui/framework.jar.out/smali/android/telephony/;

cp -aRf $wip_cm/framework.jar.out/smali/android/net/wifi/WifiChannel.smali $wip_miui/framework.jar.out/smali/android/net/wifi/;
cp -aRf $wip_cm/framework.jar.out/smali/android/net/wifi/WifiNative.smali $wip_miui/framework.jar.out/smali/android/net/wifi/;
cp -aRf $wip_cm/framework.jar.out/smali/android/os/IPowerManager*.smali $wip_miui/framework.jar.out/smali/android/os/;
cp -aRf $wip_cm/framework.jar.out/smali/android/os/SystemProperties.smali $wip_miui/framework.jar.out/smali/android/os/;
cp -aRf $wip_cm/framework.jar.out/smali/android/view/inputmethod/InputMethodInfo*.smali $wip_miui/framework.jar.out/smali/android/view/inputmethod/;
cp -aRf $wip_cm/framework.jar.out/smali/android/media/AudioFormat.smali $wip_miui/framework.jar.out/smali/android/media/;
cp -aRf $wip_cm/framework.jar.out/smali/android/nfc/* $wip_miui/framework.jar.out/smali/android/nfc/;
cp -aRf $wip_cm/framework.jar.out/smali/com/android/internal/app/ActivityTrigger.smali $wip_miui/framework.jar.out/smali/com/android/internal/app/;

cp -aRf $wip_cm/services.jar.out/smali/com/android/server/input/InputManagerService$\ChainedInputFilterHost.smali $wip_miui/services.jar.out/smali/com/android/server/input/;
cp -aRf $wip_cm/services.jar.out/smali/com/android/server/location/GpsLocationProvider.smali $wip_miui/services.jar.out/smali/com/android/server/location/

# 3-way reboot, thanks to iBotPeaches for the basics, but i had to modify it
sed -i '' s/MiuiGlobalActions\$4/MiuiGlobalActions\$222/g $wip_miui/android.policy.jar.out/smali/com/android/internal/policy/impl/MiuiGlobalActions.smali;

sed -i '' s/".method private showTimeoutDialog()V"/".method private showTimeoutDialog2()V"/g $wip_miui/android.policy.jar.out/smali/com/android/internal/policy/impl/LockPatternKeyguardView.smali;

sed -i '' '/# instance fields/i \
# static fields\
.field protected static rebootMode:I\
\
.field protected static final rebootOptions:[Ljava/lang/String;\
' $wip_miui/android.policy.jar.out/smali/com/android/internal/policy/impl/MiuiGlobalActions\$SinglePressAction.smali;

sed -i '' '/.method protected constructor <init>(II)V/i\
.method static constructor <clinit>()V\
    .registers 3\
\
    const/4 v0, 0x3\
\
    new-array v0, v0, [Ljava/lang/String;\
\
    const/4 v1, 0x0\
\
    const-string v2, "Normal"\
\
    aput-object v2, v0, v1\
\
    const/4 v1, 0x1\
\
    const-string v2, "Recovery"\
\
    aput-object v2, v0, v1\
\
    const/4 v1, 0x2\
\
    const-string v2, "Bootloader"\
\
    aput-object v2, v0, v1\
\
    sput-object v0, Lcom/android/internal/policy/impl/MiuiGlobalActions$SinglePressAction;->rebootOptions:[Ljava/lang/String;\
\
    return-void \
.end method\
' $wip_miui/android.policy.jar.out/smali/com/android/internal/policy/impl/MiuiGlobalActions\$SinglePressAction.smali;

sed -i '' '/.method static synthetic access\$100(Lcom\/android\/internal\/policy\/impl\/MiuiGlobalActions;)Landroid\/os\/Handler;/i\
.method static synthetic access\$100(Lcom/android/internal/policy/impl/MiuiGlobalActions;)Landroid/content/Context;\
	.locals 1\
\
	iget-object v0, p0, Lcom/android/internal/policy/impl/MiuiGlobalActions;->mContext:Landroid/content/Context;\
\
	return-object v0\
.end method\
' $wip_miui/android.policy.jar.out/smali/com/android/internal/policy/impl/MiuiGlobalActions.smali;

#media scanner fix
sed -i '' 's/makeEntryFor/fastMakeEntryFor/' $wip_miui/framework.jar.out/smali/android/media/MediaScanner\$MyMediaScannerClient.smali;
sed -i '' 's/.method protected finalize()V/.method fastMakeEntryFor(Ljava/lang/String;)Landroid/media/MediaScanner$FileEntry;\
    .locals 14\
    .parameter "path"\
\
    .prologue\
    const/4 v12, 0x0\
\
    .local v12, c:Landroid/database/Cursor;\
    :try_start_0\
    const-string v0, "_"\
\
    invoke-virtual {p1, v0}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z\
\
    move-result v0\
\
    if-nez v0, :cond_0\
\
    const-string v0, "%"\
\
    invoke-virtual {p1, v0}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z\
\
    move-result v0\
\
    if-eqz v0, :cond_4\
\
    :cond_0\
    const/4 v13, 0x1\
\
    .local v13, hasWildCards:Z\
    :goto_0\
    if-nez v13, :cond_1\
\
    iget-boolean v0, p0, Landroid/media/MediaScanner;->mCaseInsensitivePaths:Z\
\
    if-nez v0, :cond_5\
\
    :cond_1\
    const-string v3, "_data=?"\
\
    .local v3, where:Ljava/lang/String;\
    const/4 v0, 0x1\
\
    new-array v4, v0, [Ljava/lang/String;\
\
    const/4 v0, 0x0\
\
    aput-object p1, v4, v0\
\
    .local v4, selectionArgs:[Ljava/lang/String;\
    :goto_1\
    iget-object v0, p0, Landroid/media/MediaScanner;->mMediaProvider:Landroid/content/IContentProvider;\
\
    iget-object v1, p0, Landroid/media/MediaScanner;->mFilesUri:Landroid/net/Uri;\
\
    sget-object v2, Landroid/media/MediaScanner;->FILES_PRESCAN_PROJECTION:[Ljava/lang/String;\
\
    const/4 v5, 0x0\
\
    const/4 v6, 0x0\
\
    invoke-interface/range {v0 .. v6}, Landroid/content/IContentProvider;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/ICancellationSignal;)Landroid/database/Cursor;\
\
    move-result-object v12\
\
    invoke-interface {v12}, Landroid/database/Cursor;->moveToFirst()Z\
\
    move-result v0\
\
    if-nez v0, :cond_2\
\
    if-eqz v13, :cond_2\
\
    iget-boolean v0, p0, Landroid/media/MediaScanner;->mCaseInsensitivePaths:Z\
\
    if-eqz v0, :cond_2\
\
    const-string v3, "_data LIKE ?1 AND lower(_data)=lower(?1)"\
\
    const/4 v0, 0x1\
\
    new-array v4, v0, [Ljava/lang/String;\
\
    .end local v4           #selectionArgs:[Ljava/lang/String;\
    const/4 v0, 0x0\
\
    aput-object p1, v4, v0\
\
    .restart local v4       #selectionArgs:[Ljava/lang/String;\
    invoke-interface {v12}, Landroid/database/Cursor;->close()V\
\
    iget-object v0, p0, Landroid/media/MediaScanner;->mMediaProvider:Landroid/content/IContentProvider;\
\
    iget-object v1, p0, Landroid/media/MediaScanner;->mFilesUri:Landroid/net/Uri;\
\
    sget-object v2, Landroid/media/MediaScanner;->FILES_PRESCAN_PROJECTION:[Ljava/lang/String;\
\
    const/4 v5, 0x0\
\
    const/4 v6, 0x0\
\
    invoke-interface/range {v0 .. v6}, Landroid/content/IContentProvider;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/ICancellationSignal;)Landroid/database/Cursor;\
\
    move-result-object v12\
\
    :cond_2\
    invoke-interface {v12}, Landroid/database/Cursor;->moveToFirst()Z\
\
    move-result v0\
\
    if-eqz v0, :cond_8\
\
    const/4 v0, 0x0\
\
    invoke-interface {v12, v0}, Landroid/database/Cursor;->getLong(I)J\
\
    move-result-wide v6\
\
    .local v6, rowId:J\
    const/4 v0, 0x2\
\
    invoke-interface {v12, v0}, Landroid/database/Cursor;->getInt(I)I\
\
    move-result v11\
\
    .local v11, format:I\
    const/4 v0, 0x3\
\
    invoke-interface {v12, v0}, Landroid/database/Cursor;->getLong(I)J\
\
    move-result-wide v9\
\
    .local v9, lastModified:J\
    new-instance v5, Landroid/media/MediaScanner$FileEntry;\
\
    move-object v8, p1\
\
    invoke-direct/range {v5 .. v11}, Landroid/media/MediaScanner$FileEntry;-><init>(JLjava/lang/String;JI)V\
    :try_end_0\
    .catchall {:try_start_0 .. :try_end_0} :catchall_0\
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0\
\
    if-eqz v12, :cond_3\
\
    invoke-interface {v12}, Landroid/database/Cursor;->close()V\
\
    .end local v3           #where:Ljava/lang/String;\
    .end local v4           #selectionArgs:[Ljava/lang/String;\
    .end local v6           #rowId:J\
    .end local v9           #lastModified:J\
    .end local v11           #format:I\
    .end local v13           #hasWildCards:Z\
    :cond_3\
    :goto_2\
    return-object v5\
\
    :cond_4\
    const/4 v13, 0x0\
\
    goto :goto_0\
\
    .restart local v13       #hasWildCards:Z\
    :cond_5\
    :try_start_1\
    const-string v3, "_data LIKE ?1 AND lower(_data)=lower(?1)"\
\
    .restart local v3       #where:Ljava/lang/String;\
    const/4 v0, 0x1\
\
    new-array v4, v0, [Ljava/lang/String;\
\
    const/4 v0, 0x0\
\
    aput-object p1, v4, v0\
    :try_end_1\
    .catchall {:try_start_1 .. :try_end_1} :catchall_0\
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0\
\
    .restart local v4       #selectionArgs:[Ljava/lang/String;\
    goto :goto_1\
\
    .end local v3           #where:Ljava/lang/String;\
    .end local v4           #selectionArgs:[Ljava/lang/String;\
    .end local v13           #hasWildCards:Z\
    :catchall_0\
    move-exception v0\
\
    if-eqz v12, :cond_6\
\
    invoke-interface {v12}, Landroid/database/Cursor;->close()V\
\
    :cond_6\
    throw v0\
\
    :catch_0\
    move-exception v0\
\
    if-eqz v12, :cond_7\
\
    :goto_3\
    invoke-interface {v12}, Landroid/database/Cursor;->close()V\
\
    :cond_7\
    const/4 v5, 0x0\
\
    goto :goto_2\
\
    .restart local v3       #where:Ljava/lang/String;\
    .restart local v4       #selectionArgs:[Ljava/lang/String;\
    .restart local v13       #hasWildCards:Z\
    :cond_8\
    if-eqz v12, :cond_7\
\
    goto :goto_3\
.end method\
\
.method protected finalize()V/' $wip_miui/framework.jar.out/smali/android/media/MediaScanner.smali;
sed -i '' 's/->makeEntryFor/->fastMakeEntryFor/' $wip_miui/framework.jar.out/smali/android/media/MediaScanner.smali;

#remove 'system update bottom bar' from about the phone
sed -i '' 's/MenuInflater;)V/MenuInflater;)V \
    return-void/' $dir/wip/apks/Settings.apk/smali/com/android/settings/MiuiDeviceInfoSettings.smali;

#remove double autostart and permissions manager from the desktop
cp $dir/wip/apks/LBESEC_MIUI.apk/AndroidManifest.xml $dir/random_apk_fixes/LBESEC_MIUI.apk/AndroidManifest.xml
sed -i '' 's/<category android:name="android.intent.category.LAUNCHER" \/>/<!--category android:name="android.intent.category.LAUNCHER" \/-->/' $dir/random_apk_fixes/LBESEC_MIUI.apk/AndroidManifest.xml;

#move over merges for apk and smali
cp -aRf $dir/random_apk_fixes/* $dir/wip/apks/;
cp -aRf $dir/random_smali_fixes/android.policy.jar.out/* $wip_miui/android.policy.jar.out/;

echo "Auto merge complete. Time for manual merges :/";

#manual diff
echo "Merge nativeSetStylusIconEnabled()";
sleep 1;
$diffmerge $wip_cm/services.jar.out/smali/com/android/server/input/InputManagerService.smali $wip_miui/services.jar.out/smali/com/android/server/input/InputManagerService.smali;

echo "Merge nativeCpuBoost"
sleep 4;
$diffmerge $wip_cm/services.jar.out/smali/com/android/server/power/PowerManagerService.smali $wip_miui/services.jar.out/smali/com/android/server/power/PowerManagerService.smali;

echo "Patch AssetManager"
sleep 4;
$diffmerge $wip_cm/framework.jar.out/smali/android/content/res/AssetManager.smali $wip_miui/framework.jar.out/smali/android/content/res/AssetManager.smali;


echo "Patch WebSettingsClassic"
sleep 4;
$diffmerge $wip_cm/framework.jar.out/smali/android/webkit/WebSettingsClassic.smali $wip_miui/framework.jar.out/smali/android/webkit/WebSettingsClassic.smali;

echo "Patch FileUtils"
sleep 4;
$diffmerge $wip_cm/framework.jar.out/smali/android/os/FileUtils.smali $wip_miui/framework.jar.out/smali/android/os/FileUtils.smali;

#mod some apks
echo 'Add this line at end: <bool name="config_forceDisableHardwareKeyboard">true</bool>, and disable showNavigationBar';
sleep 5;
nano $dir/wip/apks/framework-res.apk/res/values/bools.xml

echo "Everything is done :) Rebuilding now....";

##START THE REBUILD - apks
$dir/../tools/apktool b $dir/wip/apks/Settings.apk
$dir/../tools/apktool b $dir/wip/apks/LBESEC_MIUI.apk
$dir/../tools/apktool b $dir/wip/apks/framework-res.apk
$dir/../tools/apktool b $dir/wip/jars/miui/services.jar.out
$dir/../tools/apktool b $dir/wip/jars/miui/framework.jar.out
$dir/../tools/apktool b $dir/wip/jars/miui/android.policy.jar.out
$dir/../tools/apktool b $dir/wip/jars/miui/telephony-common.jar.out

#lets merge this back into the main APKs / JARs
7za u -mx0 -tzip $dir/port/system/framework/android.policy.jar $dir/wip/jars/miui/android.policy.jar.out/build/apk/classes.dex > /dev/null;
7za u -mx0 -tzip $dir/port/system/framework/telephony-common.jar $dir/wip/jars/miui/telephony-common.jar.out/build/apk/classes.dex > /dev/null;
7za u -mx0 -tzip $dir/port/system/framework/services.jar $dir/wip/jars/miui/services.jar.out/build/apk/classes.dex > /dev/null;
7za u -mx0 -tzip $dir/port/system/framework/framework.jar $dir/wip/jars/miui/framework.jar.out/build/apk/classes.dex > /dev/null;
7za u -mx0 -tzip $dir/port/system/app/Settings.apk $dir/wip/apks/Settings.apk/build/apk/classes.dex > /dev/null;
7za u -mx0 -tzip $dir/port/system/app/Settings.apk $dir/wip/apks/Settings.apk/build/apk/resources.arsc > /dev/null;
7za u -mx0 -tzip $dir/port/system/app/Settings.apk $dir/wip/apks/Settings.apk/build/apk/res > /dev/null;
7za u -mx0 -tzip $dir/port/system/app/LBESEC_MIUI.apk $dir/wip/apks/LBESEC_MIUI.apk/build/apk/AndroidManifest.xml > /dev/null;
7za u -mx0 -tzip $dir/port/system/framework/framework-res.apk $dir/wip/apks/framework-res.apk/build/apk/res > /dev/null;
7za u -mx0 -tzip $dir/port/system/framework/framework-res.apk $dir/wip/apks/framework-res.apk/build/apk/resources.arsc > /dev/null;

#Lets zipalign these bastards.
for file in $dir/port/system/app/*.apk; do
  $dir/../tools/zipalign 4 $file $file.zipalligned;
  echo "Zipaligned $(basename $file);";
done;

for file in $dir/port/system/app/*.apk; do
   rm -rf $file;
   mv $file.zipalligned $file;
done;

echo "Signing with correct keys";

# If you run this, you must add DeviceSettings cert into the flie afterwards
#dir=$dir $dir/../tools/build_apkcerts.sh

# I am not proud of this hack
for file in $dir/port/system/app/*.apk; do
	file2=`basename $file`;
	APKINFO=`grep "name=\"$file2\"" $APKCERTS`;
	if [ "$APKINFO" = "" ];
		then
		    echo "No apk info for $file";
		fi
	CERT=`echo $APKINFO | awk {'print $2'} | cut -f 2 -d "=" | tr -d "\""`;
	KEY=`echo $APKINFO | awk {'print $3'} | cut -f 2 -d "=" | tr -d "\""`;
	if [ "$CERT" = "" ];
	then
	    echo "Unable to find certificate for $file"
	else
		if [ "$CERT" != "PRESIGNED" ];
		then
			if [ -f "$file" ];
			then
				java -jar $dir/../tools/signapk.jar $dir/$CERT $dir/$KEY $file $file.signed;
				mv $file.signed $file;
			fi
		fi
	fi
done;
for file in $dir/port/system/framework/*.apk; do
	file2=`basename $file`;
	APKINFO=`grep "name=\"$file2\"" $APKCERTS`;
	if [ "$APKINFO" = "" ];
		then
		    echo "No apk info for $file";
		fi
	CERT=`echo $APKINFO | awk {'print $2'} | cut -f 2 -d "=" | tr -d "\""`;
	KEY=`echo $APKINFO | awk {'print $3'} | cut -f 2 -d "=" | tr -d "\""`;
	if [ "$CERT" = "" ];
	then
	    echo "Unable to find certificate for $file"
	else
		if [ "$CERT" != "PRESIGNED" ];
		then
			if [ -f "$file" ];
			then
				java -jar $dir/../tools/signapk.jar $dir/$CERT $dir/$KEY $file $file.signed;
				mv $file.signed $file;
			fi
		fi
	fi
done;

# Zip this guy
cd $dir/port/;
rm -rf $dir/COMPLETED_ZIPS/miui_un*.zip;
zip -r $dir/COMPLETED_ZIPS/miui_unsigned.zip * > /dev/null
echo "ZIP Complete. Signing now...";

#delete same name, old zip if there.
if [ -f $dir/COMPLETED_ZIPS/miuiandroid_$phone-$version.zip ]; then
   rm -rf $dir/COMPLETED_ZIPS/miuiandroid_$phone-$version.zip;
fi

#Sign the zip.
java -Xmx2048m -jar $dir/../tools/signapk.jar -w $dir/../tools/security/testkey.x509.pem $dir/../tools/security/testkey.pk8 $dir/COMPLETED_ZIPS/miui_unsigned.zip $dir/COMPLETED_ZIPS/miuiandroid_$phone-$version.zip;

#cleanup
rm -rf $dir/COMPLETED_ZIPS/miui_un*.zip;
